using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using GreenChargerAPI.Models;
using GreenChargerAPI.Interfaces;
using Microsoft.EntityFrameworkCore;
using GreenChargerAPI.Services;
using AutoMapper;

using GreenChargerAPI.Models.DTOs;
namespace GreenChargerAPI.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class CategoryController : ControllerBase
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly CloudinaryService _cloudinaryService;

        public CategoryController(IUnitOfWork unitOfWork, IMapper mapper, CloudinaryService cloudinaryService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _cloudinaryService = cloudinaryService;
        }  

        // GET: api/category
        [HttpGet]
        public async Task<IActionResult> GetAll()
        {
            var categories = await _unitOfWork.Categories.GetAllAsync(
                includeProperties: q => q.Include(c => c.Products)
            );
            var dtos = _mapper.Map<IEnumerable<CategoryDto>>(categories);
            return Ok(dtos);
        }

        // GET: api/category/5
        [HttpGet("{id}")]
        public async Task<IActionResult> GetById(int id)
        {
            var category = await _unitOfWork.Categories.GetByIdAsync(id, 
                includeProperties: q => q.Include(c => c.Products));
            if (category == null) return NotFound();
            var dto = _mapper.Map<CategoryDto>(category);
            return Ok(dto);
        }

        // POST: api/category
        [HttpPost]
        [Authorize(Roles = "Admin")]
        public async Task<ActionResult<CategoryDto>> CreateCategory([FromBody] CategoryDto dto)
        {
            if (!ModelState.IsValid)
                return BadRequest(ModelState);
            var category = _mapper.Map<Category>(dto);
            await _unitOfWork.Categories.AddAsync(category);
            await _unitOfWork.CompleteAsync();
            var resultDto = _mapper.Map<CategoryDto>(category);
            return CreatedAtAction(nameof(GetById), new { id = category.Id }, resultDto);
        }

        // PUT: api/category/5
        [HttpPut("{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UpdateCategory(int id, [FromBody] CategoryDto dto)
        {
            if (id != dto.Id)
                return BadRequest();
            if (!ModelState.IsValid)
                return BadRequest(ModelState);
            
            var category = await _unitOfWork.Categories.GetByIdAsync(id);
            if (category == null)
                return NotFound();

            // Delete old image if URL is changing
            if (!string.IsNullOrEmpty(category.ImageUrl) && 
                category.ImageUrl != dto.ImageUrl)
            {
                await _cloudinaryService.DeleteFileByUrlAsync(category.ImageUrl);
            }

            _mapper.Map(dto, category);
            _unitOfWork.Categories.Update(category);
            await _unitOfWork.CompleteAsync();
            return NoContent();
        }

        // DELETE: api/category/5
        [HttpDelete("{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete(int id)
        {
            var category = await _unitOfWork.Categories.GetByIdAsync(id);
            if (category == null) return NotFound();

            // Delete image if exists
            if (!string.IsNullOrEmpty(category.ImageUrl))
            {
                await _cloudinaryService.DeleteFileByUrlAsync(category.ImageUrl);
            }

            _unitOfWork.Categories.Remove(category);
            await _unitOfWork.CompleteAsync();
            return NoContent();
        }

        // POST: api/category/upload-image
        [HttpPost("upload-image")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UploadImageMinio(IFormFile file)
        {
            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded");

            var url = await _cloudinaryService.UploadFileAsync(file);

            return Ok(new { imageUrl = url });
        }

        // POST: api/category/upload-image-and-update/{id}
        [HttpPost("upload-image-and-update/{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UploadImageAndUpdateCategory(int id, IFormFile file)
        {
            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded");

            var category = await _unitOfWork.Categories.GetByIdAsync(id);
            if (category == null)
                return NotFound("Category not found");

            // Delete old image if exists
            if (!string.IsNullOrEmpty(category.ImageUrl))
            {
                await _cloudinaryService.DeleteFileByUrlAsync(category.ImageUrl);
            }

            // Upload new image
            var newImageUrl = await _cloudinaryService.UploadFileAsync(file);
            
            // Update category with new image URL
            category.ImageUrl = newImageUrl;
            _unitOfWork.Categories.Update(category);
            await _unitOfWork.CompleteAsync();

            var dto = _mapper.Map<CategoryDto>(category);
            return Ok(new { message = "Image uploaded and category updated successfully", category = dto });
        }

        // PUT: api/category/update-with-image/{id}
        [HttpPut("update-with-image/{id}")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> UpdateCategoryWithImage(int id, [FromForm] CategoryUpdateWithImageDto dto)
        {
            var category = await _unitOfWork.Categories.GetByIdAsync(id);
            if (category == null)
                return NotFound("Category not found");

            // Update basic info
            category.Name = dto.Name;
            category.Description = dto.Description;

            // Handle image upload if provided
            if (dto.File != null && dto.File.Length > 0)
            {
                // Delete old image if exists
                if (!string.IsNullOrEmpty(category.ImageUrl))
                {
                    await _cloudinaryService.DeleteFileByUrlAsync(category.ImageUrl);
                }

                // Upload new image
                var newImageUrl = await _cloudinaryService.UploadFileAsync(dto.File);
                category.ImageUrl = newImageUrl;
            }

            _unitOfWork.Categories.Update(category);
            await _unitOfWork.CompleteAsync();

            var resultDto = _mapper.Map<CategoryDto>(category);
            return Ok(new { message = "Category updated successfully", category = resultDto });
        }

        // POST: api/category/create-with-image
        [HttpPost("create-with-image")]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> CreateCategoryWithImage([FromForm] CategoryCreateWithImageDto dto)
        {
            if (string.IsNullOrWhiteSpace(dto.Name)) return BadRequest("Name is required");

            var category = new Category
            {
                Name = dto.Name,
                Description = dto.Description
            };

            if (dto.File != null && dto.File.Length > 0)
            {
                var imageUrl = await _cloudinaryService.UploadFileAsync(dto.File);
                category.ImageUrl = imageUrl;
            }

            await _unitOfWork.Categories.AddAsync(category);
            await _unitOfWork.CompleteAsync();

            var resultDto = _mapper.Map<CategoryDto>(category);
            return CreatedAtAction(nameof(GetById), new { id = category.Id }, resultDto);
        }

        // TEST: api/category/test-update/5 - Temporary endpoint for testing without auth
        [HttpPut("test-update/{id}")]
        public async Task<IActionResult> TestUpdateCategory(int id, [FromBody] CategoryDto dto)
        {
            if (id != dto.Id)
                return BadRequest();
            if (!ModelState.IsValid)
                return BadRequest(ModelState);
            
            var category = await _unitOfWork.Categories.GetByIdAsync(id);
            if (category == null)
                return NotFound();

            Console.WriteLine($"Updating category {id} with data: {System.Text.Json.JsonSerializer.Serialize(dto)}");

            // Delete old image if URL is changing
            if (!string.IsNullOrEmpty(category.ImageUrl) && 
                category.ImageUrl != dto.ImageUrl)
            {
                Console.WriteLine($"Deleting old image: {category.ImageUrl}");
                await _cloudinaryService.DeleteFileByUrlAsync(category.ImageUrl);
            }

            _mapper.Map(dto, category);
            _unitOfWork.Categories.Update(category);
            var result = await _unitOfWork.CompleteAsync();
            
            Console.WriteLine($"Update result: {result}");
            Console.WriteLine($"Updated category: {System.Text.Json.JsonSerializer.Serialize(category)}");
            
            return Ok(new { message = "Update successful", category = _mapper.Map<CategoryDto>(category) });
        }

        // TEST: api/category/test-upload-image-and-update/{id}
        [HttpPost("test-upload-image-and-update/{id}")]
        public async Task<IActionResult> TestUploadImageAndUpdateCategory(int id, IFormFile file)
        {
            if (file == null || file.Length == 0)
                return BadRequest("No file uploaded");

            var category = await _unitOfWork.Categories.GetByIdAsync(id);
            if (category == null)
                return NotFound("Category not found");

            Console.WriteLine($"Updating category {id} with new image");

            // Delete old image if exists
            if (!string.IsNullOrEmpty(category.ImageUrl))
            {
                Console.WriteLine($"Deleting old image: {category.ImageUrl}");
                await _cloudinaryService.DeleteFileByUrlAsync(category.ImageUrl);
            }

            // Upload new image
            var newImageUrl = await _cloudinaryService.UploadFileAsync(file);
            Console.WriteLine($"New image uploaded: {newImageUrl}");
            
            // Update category with new image URL
            category.ImageUrl = newImageUrl;
            _unitOfWork.Categories.Update(category);
            var result = await _unitOfWork.CompleteAsync();

            Console.WriteLine($"Update result: {result}");
            Console.WriteLine($"Updated category: {System.Text.Json.JsonSerializer.Serialize(category)}");

            var dto = _mapper.Map<CategoryDto>(category);
            return Ok(new { message = "Image uploaded and category updated successfully", category = dto });
        }

        // TEST: api/category/test-update-with-image/{id}
        [HttpPut("test-update-with-image/{id}")]
        public async Task<IActionResult> TestUpdateCategoryWithImage(int id, [FromForm] CategoryUpdateWithImageDto updateDto)
        {
            var category = await _unitOfWork.Categories.GetByIdAsync(id);
            if (category == null)
                return NotFound("Category not found");

            Console.WriteLine($"Updating category {id} - Name: {updateDto.Name}, Description: {updateDto.Description}, HasFile: {updateDto.File != null}");

            // Update basic info
            category.Name = updateDto.Name;
            category.Description = updateDto.Description;

            // Handle image upload if provided
            if (updateDto.File != null && updateDto.File.Length > 0)
            {
                Console.WriteLine($"Processing new image file: {updateDto.File.FileName}");
                
                // Delete old image if exists
                if (!string.IsNullOrEmpty(category.ImageUrl))
                {
                    Console.WriteLine($"Deleting old image: {category.ImageUrl}");
                    await _cloudinaryService.DeleteFileByUrlAsync(category.ImageUrl);
                }

                // Upload new image
                var newImageUrl = await _cloudinaryService.UploadFileAsync(updateDto.File);
                Console.WriteLine($"New image uploaded: {newImageUrl}");
                category.ImageUrl = newImageUrl;
            }

            _unitOfWork.Categories.Update(category);
            var result = await _unitOfWork.CompleteAsync();

            Console.WriteLine($"Update result: {result}");
            Console.WriteLine($"Final category: {System.Text.Json.JsonSerializer.Serialize(category)}");

            var dto = _mapper.Map<CategoryDto>(category);
            return Ok(new { message = "Category updated successfully", category = dto });
        }
    }
}
