import { Injectable } from "@angular/core";
import { HttpClient, HttpHeaders } from "@angular/common/http";
import { Observable, BehaviorSubject } from "rxjs";
import { tap } from "rxjs/operators";
import { 
  User, 
  UserDto,
  LoginRequest, 
  LoginResponse, 
  RegisterRequest, 
  RegisterResponse, 
  ForgotPasswordRequest, 
  ForgotPasswordResponse,
  ResetPasswordRequest,
  ResetPasswordResponse,
  CreateUserRequest,
  UpdateUserRequest
} from "../models/user.model";
import { TokenService } from "./token.service";
import { environment } from "../../environments/environment";

export interface EmailStatusResponse { exists: boolean; emailConfirmed: boolean; message: string; }

@Injectable({
  providedIn: "root"
})
export class UserService {
  private apiUrl = `${environment.apiUrl}/Account`;
  private currentUserSubject = new BehaviorSubject<any>(null);
  public currentUser$ = this.currentUserSubject.asObservable();

  constructor(
    private http: HttpClient,
    private tokenService: TokenService
  ) {
    // Check for stored token on service initialization
    const token = localStorage.getItem("token");
    if (token) {
      // Get stored user data
      const userData = JSON.parse(localStorage.getItem("currentUser") || "{}");
      
      // If roles are not in the stored user data, try to get them from the token
      if (!userData.roles || userData.roles.length === 0) {
        const roles = this.tokenService.getRolesFromToken(token);
        if (roles && roles.length > 0) {
          userData.roles = roles;
          localStorage.setItem("currentUser", JSON.stringify(userData));
        }
      }
      
      this.currentUserSubject.next(userData);
    }
  }

  private getAuthHeaders(): HttpHeaders {
    const token = localStorage.getItem("token");
    return new HttpHeaders({
      "Authorization": `Bearer ${token}`,
      "Content-Type": "application/json"
    });
  }

  login(loginData: LoginRequest): Observable<LoginResponse> {
    return this.http.post<LoginResponse>(`${this.apiUrl}/login`, loginData)
      .pipe(
        tap(response => {
          const token = response.token;
          localStorage.setItem("token", token);
          
          // Store user data with roles
          const userData = response.user;
          console.log("Login response:", response);
          
          // If roles are not in the response, try to get them from the token
          if (!userData.roles || userData.roles.length === 0) {
            const roles = this.tokenService.getRolesFromToken(token);
            if (roles && roles.length > 0) {
              userData.roles = roles;
            }
          }
          
          localStorage.setItem("currentUser", JSON.stringify(userData));
          this.currentUserSubject.next(userData);
        })
      );
  }

  register(registerData: RegisterRequest): Observable<RegisterResponse> {
    return this.http.post<RegisterResponse>(`${this.apiUrl}/register`, registerData);
  }

  forgotPassword(forgotPasswordData: ForgotPasswordRequest): Observable<ForgotPasswordResponse> {
    return this.http.post<ForgotPasswordResponse>(`${this.apiUrl}/forgot-password`, forgotPasswordData);
  }

  resetPassword(resetPasswordData: ResetPasswordRequest): Observable<ResetPasswordResponse> {
    return this.http.post<ResetPasswordResponse>(`${this.apiUrl}/reset-password`, resetPasswordData);
  }

  // New: Check if email exists / status
  checkEmailStatus(email: string): Observable<EmailStatusResponse> {
    return this.http.get<EmailStatusResponse>(`${this.apiUrl}/check-email-status`, {
      params: { email }
    });
  }

  // New: Confirm email
  confirmEmail(email: string, token: string): Observable<{ message: string }> {
    return this.http.get<{ message: string }>(`${this.apiUrl}/confirm-email`, {
      params: { email, token }
    });
  }

  // New: Resend confirmation
  resendConfirmation(email: string): Observable<{ message: string }> {
    return this.http.post<{ message: string }>(`${this.apiUrl}/resend-confirmation`, { email });
  }

  logout(): void {
    localStorage.removeItem("token");
    localStorage.removeItem("refreshToken");
    localStorage.removeItem("currentUser");
    this.currentUserSubject.next(null);
  }

  isAuthenticated(): boolean {
    return !!localStorage.getItem("token");
  }

  getCurrentUser(): any {
    return this.currentUserSubject.value;
  }

  getToken(): string | null {
    return localStorage.getItem("token");
  }
  
  // Admin user management methods
  getUsers(): Observable<User[]> {
    return this.http.get<User[]>(`${this.apiUrl}/users`, { headers: this.getAuthHeaders() });
  }

  getUserById(userId: string): Observable<User> {
    return this.http.get<User>(`${this.apiUrl}/users/${userId}`, { headers: this.getAuthHeaders() });
  }

  createUser(userData: CreateUserRequest): Observable<User> {
    userData.emailConfirmed = true;
    return this.http.post<User>(`${this.apiUrl}/users`, userData, { headers: this.getAuthHeaders() });
  }
  
  updateUserProfile(userId: string, userData: UpdateUserRequest): Observable<User> {
    return this.http.put<User>(`${this.apiUrl}/users/${userId}`, userData, { headers: this.getAuthHeaders() });
  }
  
  deleteUser(userId: string): Observable<void> {
    return this.http.delete<void>(`${this.apiUrl}/users/${userId}`, { headers: this.getAuthHeaders() });
  }

  lockUser(userId: string): Observable<void> {
    return this.http.post<void>(`${this.apiUrl}/users/${userId}/lock`, {}, { headers: this.getAuthHeaders() });
  }

  unlockUser(userId: string): Observable<void> {
    return this.http.post<void>(`${this.apiUrl}/users/${userId}/unlock`, {}, { headers: this.getAuthHeaders() });
  }

  // Change Password Methods
  changePassword(currentPassword: string, newPassword: string): Observable<any> {
    const changePasswordData = {
      currentPassword,
      newPassword
    };
    
    return this.http.post(`${this.apiUrl}/change-password`, changePasswordData, {
      headers: this.getAuthHeaders()
    });
  }

  updateProfile(profileData: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/profile`, profileData, {
      headers: this.getAuthHeaders()
    });
  }


  // Change Password Methods
  changePassword(currentPassword: string, newPassword: string): Observable<any> {
    const changePasswordData = {
      currentPassword,
      newPassword
    };
    
    return this.http.post(`${this.apiUrl}/change-password`, changePasswordData, {
      headers: this.getAuthHeaders()
    });
  }

  updateProfile(profileData: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/profile`, profileData, {
      headers: this.getAuthHeaders()
    });
  }
}
